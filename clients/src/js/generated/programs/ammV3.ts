/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClosePositionInstruction,
  type ParsedCollectFundFeeInstruction,
  type ParsedCollectProtocolFeeInstruction,
  type ParsedCollectRemainingRewardsInstruction,
  type ParsedCreateAmmConfigInstruction,
  type ParsedCreateOperationAccountInstruction,
  type ParsedCreatePoolInstruction,
  type ParsedDecreaseLiquidityInstruction,
  type ParsedIncreaseLiquidityInstruction,
  type ParsedInitializeRewardInstruction,
  type ParsedOpenPositionInstruction,
  type ParsedResetSqrtPriceInstruction,
  type ParsedSetRewardParamsInstruction,
  type ParsedSwapInstruction,
  type ParsedSwapRouterBaseInInstruction,
  type ParsedUpdateAmmConfigInstruction,
  type ParsedUpdateOperationAccountInstruction,
  type ParsedUpdateRewardInfosInstruction,
} from '../instructions';

export const AMM_V3_PROGRAM_ADDRESS = '' as Address<''>;

export enum AmmV3Account {
  AmmConfig,
  OperationState,
  ObservationState,
  PersonalPositionState,
  PoolState,
  ProtocolPositionState,
  TickArrayState,
}

export function identifyAmmV3Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmV3Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 244, 33, 104, 203, 203, 43, 111])
      ),
      0
    )
  ) {
    return AmmV3Account.AmmConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([19, 236, 58, 237, 81, 222, 183, 252])
      ),
      0
    )
  ) {
    return AmmV3Account.OperationState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 174, 197, 53, 129, 9, 165, 132])
      ),
      0
    )
  ) {
    return AmmV3Account.ObservationState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 111, 150, 126, 230, 15, 25, 117])
      ),
      0
    )
  ) {
    return AmmV3Account.PersonalPositionState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([247, 237, 227, 245, 215, 195, 222, 70])
      ),
      0
    )
  ) {
    return AmmV3Account.PoolState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 226, 145, 99, 146, 218, 160, 106])
      ),
      0
    )
  ) {
    return AmmV3Account.ProtocolPositionState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([192, 155, 85, 205, 49, 249, 129, 42])
      ),
      0
    )
  ) {
    return AmmV3Account.TickArrayState;
  }
  throw new Error(
    'The provided account could not be identified as a ammV3 account.'
  );
}

export enum AmmV3Instruction {
  CreateAmmConfig,
  UpdateAmmConfig,
  CreatePool,
  CreateOperationAccount,
  UpdateOperationAccount,
  ResetSqrtPrice,
  InitializeReward,
  CollectRemainingRewards,
  UpdateRewardInfos,
  SetRewardParams,
  CollectProtocolFee,
  CollectFundFee,
  OpenPosition,
  ClosePosition,
  IncreaseLiquidity,
  DecreaseLiquidity,
  Swap,
  SwapRouterBaseIn,
}

export function identifyAmmV3Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AmmV3Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 52, 237, 212, 215, 117, 108, 104])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CreateAmmConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([49, 60, 174, 136, 154, 28, 116, 200])
      ),
      0
    )
  ) {
    return AmmV3Instruction.UpdateAmmConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([233, 146, 209, 142, 207, 104, 64, 188])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CreatePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([63, 87, 148, 33, 109, 35, 8, 104])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CreateOperationAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([127, 70, 119, 40, 188, 227, 61, 7])
      ),
      0
    )
  ) {
    return AmmV3Instruction.UpdateOperationAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([36, 83, 233, 182, 194, 87, 47, 31])
      ),
      0
    )
  ) {
    return AmmV3Instruction.ResetSqrtPrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68])
      ),
      0
    )
  ) {
    return AmmV3Instruction.InitializeReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([18, 237, 166, 197, 34, 16, 213, 144])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CollectRemainingRewards;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 172, 224, 52, 11, 154, 106, 223])
      ),
      0
    )
  ) {
    return AmmV3Instruction.UpdateRewardInfos;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([112, 52, 167, 75, 32, 201, 211, 137])
      ),
      0
    )
  ) {
    return AmmV3Instruction.SetRewardParams;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 136, 252, 221, 194, 66, 126, 89])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CollectProtocolFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 138, 78, 149, 223, 194, 6, 126])
      ),
      0
    )
  ) {
    return AmmV3Instruction.CollectFundFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 128, 47, 77, 15, 152, 240, 49])
      ),
      0
    )
  ) {
    return AmmV3Instruction.OpenPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 134, 81, 0, 49, 68, 98, 98])
      ),
      0
    )
  ) {
    return AmmV3Instruction.ClosePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 156, 243, 118, 13, 205, 251, 178])
      ),
      0
    )
  ) {
    return AmmV3Instruction.IncreaseLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 38, 208, 111, 104, 91, 44, 1])
      ),
      0
    )
  ) {
    return AmmV3Instruction.DecreaseLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200])
      ),
      0
    )
  ) {
    return AmmV3Instruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 125, 115, 218, 245, 186, 242, 196])
      ),
      0
    )
  ) {
    return AmmV3Instruction.SwapRouterBaseIn;
  }
  throw new Error(
    'The provided instruction could not be identified as a ammV3 instruction.'
  );
}

export type ParsedAmmV3Instruction<TProgram extends string = ''> =
  | ({
      instructionType: AmmV3Instruction.CreateAmmConfig;
    } & ParsedCreateAmmConfigInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.UpdateAmmConfig;
    } & ParsedUpdateAmmConfigInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.CreatePool;
    } & ParsedCreatePoolInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.CreateOperationAccount;
    } & ParsedCreateOperationAccountInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.UpdateOperationAccount;
    } & ParsedUpdateOperationAccountInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.ResetSqrtPrice;
    } & ParsedResetSqrtPriceInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.InitializeReward;
    } & ParsedInitializeRewardInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.CollectRemainingRewards;
    } & ParsedCollectRemainingRewardsInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.UpdateRewardInfos;
    } & ParsedUpdateRewardInfosInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.SetRewardParams;
    } & ParsedSetRewardParamsInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.CollectProtocolFee;
    } & ParsedCollectProtocolFeeInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.CollectFundFee;
    } & ParsedCollectFundFeeInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.OpenPosition;
    } & ParsedOpenPositionInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.ClosePosition;
    } & ParsedClosePositionInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.IncreaseLiquidity;
    } & ParsedIncreaseLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.DecreaseLiquidity;
    } & ParsedDecreaseLiquidityInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: AmmV3Instruction.SwapRouterBaseIn;
    } & ParsedSwapRouterBaseInInstruction<TProgram>);
