/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_V3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INCREASE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  46, 156, 243, 118, 13, 205, 251, 178,
]);

export function getIncreaseLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_LIQUIDITY_DISCRIMINATOR
  );
}

export type IncreaseLiquidityInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountNftOwner extends string | AccountMeta<string> = string,
  TAccountNftAccount extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountProtocolPosition extends string | AccountMeta<string> = string,
  TAccountPersonalPosition extends string | AccountMeta<string> = string,
  TAccountTickArrayLower extends string | AccountMeta<string> = string,
  TAccountTickArrayUpper extends string | AccountMeta<string> = string,
  TAccountTokenAccount0 extends string | AccountMeta<string> = string,
  TAccountTokenAccount1 extends string | AccountMeta<string> = string,
  TAccountTokenVault0 extends string | AccountMeta<string> = string,
  TAccountTokenVault1 extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountNftOwner extends string
        ? ReadonlySignerAccount<TAccountNftOwner> &
            AccountSignerMeta<TAccountNftOwner>
        : TAccountNftOwner,
      TAccountNftAccount extends string
        ? ReadonlyAccount<TAccountNftAccount>
        : TAccountNftAccount,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountProtocolPosition extends string
        ? WritableAccount<TAccountProtocolPosition>
        : TAccountProtocolPosition,
      TAccountPersonalPosition extends string
        ? WritableAccount<TAccountPersonalPosition>
        : TAccountPersonalPosition,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountTokenAccount0 extends string
        ? WritableAccount<TAccountTokenAccount0>
        : TAccountTokenAccount0,
      TAccountTokenAccount1 extends string
        ? WritableAccount<TAccountTokenAccount1>
        : TAccountTokenAccount1,
      TAccountTokenVault0 extends string
        ? WritableAccount<TAccountTokenVault0>
        : TAccountTokenVault0,
      TAccountTokenVault1 extends string
        ? WritableAccount<TAccountTokenVault1>
        : TAccountTokenVault1,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidity: bigint;
  amount0Max: bigint;
  amount1Max: bigint;
};

export type IncreaseLiquidityInstructionDataArgs = {
  liquidity: number | bigint;
  amount0Max: number | bigint;
  amount1Max: number | bigint;
};

export function getIncreaseLiquidityInstructionDataEncoder(): FixedSizeEncoder<IncreaseLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['liquidity', getU128Encoder()],
      ['amount0Max', getU64Encoder()],
      ['amount1Max', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INCREASE_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getIncreaseLiquidityInstructionDataDecoder(): FixedSizeDecoder<IncreaseLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['liquidity', getU128Decoder()],
    ['amount0Max', getU64Decoder()],
    ['amount1Max', getU64Decoder()],
  ]);
}

export function getIncreaseLiquidityInstructionDataCodec(): FixedSizeCodec<
  IncreaseLiquidityInstructionDataArgs,
  IncreaseLiquidityInstructionData
> {
  return combineCodec(
    getIncreaseLiquidityInstructionDataEncoder(),
    getIncreaseLiquidityInstructionDataDecoder()
  );
}

export type IncreaseLiquidityInput<
  TAccountNftOwner extends string = string,
  TAccountNftAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountProtocolPosition extends string = string,
  TAccountPersonalPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountTokenAccount0 extends string = string,
  TAccountTokenAccount1 extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  nftOwner: TransactionSigner<TAccountNftOwner>;
  nftAccount: Address<TAccountNftAccount>;
  poolState: Address<TAccountPoolState>;
  protocolPosition: Address<TAccountProtocolPosition>;
  personalPosition: Address<TAccountPersonalPosition>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  tokenAccount0: Address<TAccountTokenAccount0>;
  tokenAccount1: Address<TAccountTokenAccount1>;
  tokenVault0: Address<TAccountTokenVault0>;
  tokenVault1: Address<TAccountTokenVault1>;
  tokenProgram?: Address<TAccountTokenProgram>;
  liquidity: IncreaseLiquidityInstructionDataArgs['liquidity'];
  amount0Max: IncreaseLiquidityInstructionDataArgs['amount0Max'];
  amount1Max: IncreaseLiquidityInstructionDataArgs['amount1Max'];
};

export function getIncreaseLiquidityInstruction<
  TAccountNftOwner extends string,
  TAccountNftAccount extends string,
  TAccountPoolState extends string,
  TAccountProtocolPosition extends string,
  TAccountPersonalPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountTokenAccount0 extends string,
  TAccountTokenAccount1 extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_V3_PROGRAM_ADDRESS,
>(
  input: IncreaseLiquidityInput<
    TAccountNftOwner,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IncreaseLiquidityInstruction<
  TProgramAddress,
  TAccountNftOwner,
  TAccountNftAccount,
  TAccountPoolState,
  TAccountProtocolPosition,
  TAccountPersonalPosition,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountTokenAccount0,
  TAccountTokenAccount1,
  TAccountTokenVault0,
  TAccountTokenVault1,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_V3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    nftOwner: { value: input.nftOwner ?? null, isWritable: false },
    nftAccount: { value: input.nftAccount ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    protocolPosition: {
      value: input.protocolPosition ?? null,
      isWritable: true,
    },
    personalPosition: {
      value: input.personalPosition ?? null,
      isWritable: true,
    },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    tokenAccount0: { value: input.tokenAccount0 ?? null, isWritable: true },
    tokenAccount1: { value: input.tokenAccount1 ?? null, isWritable: true },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.nftOwner),
      getAccountMeta(accounts.nftAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.protocolPosition),
      getAccountMeta(accounts.personalPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.tokenAccount0),
      getAccountMeta(accounts.tokenAccount1),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getIncreaseLiquidityInstructionDataEncoder().encode(
      args as IncreaseLiquidityInstructionDataArgs
    ),
    programAddress,
  } as IncreaseLiquidityInstruction<
    TProgramAddress,
    TAccountNftOwner,
    TAccountNftAccount,
    TAccountPoolState,
    TAccountProtocolPosition,
    TAccountPersonalPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountTokenAccount0,
    TAccountTokenAccount1,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountTokenProgram
  >);
}

export type ParsedIncreaseLiquidityInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nftOwner: TAccountMetas[0];
    nftAccount: TAccountMetas[1];
    poolState: TAccountMetas[2];
    protocolPosition: TAccountMetas[3];
    personalPosition: TAccountMetas[4];
    tickArrayLower: TAccountMetas[5];
    tickArrayUpper: TAccountMetas[6];
    tokenAccount0: TAccountMetas[7];
    tokenAccount1: TAccountMetas[8];
    tokenVault0: TAccountMetas[9];
    tokenVault1: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: IncreaseLiquidityInstructionData;
};

export function parseIncreaseLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIncreaseLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nftOwner: getNextAccount(),
      nftAccount: getNextAccount(),
      poolState: getNextAccount(),
      protocolPosition: getNextAccount(),
      personalPosition: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      tokenAccount0: getNextAccount(),
      tokenAccount1: getNextAccount(),
      tokenVault0: getNextAccount(),
      tokenVault1: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getIncreaseLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
