/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_V3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_PROTOCOL_FEE_DISCRIMINATOR = new Uint8Array([
  136, 136, 252, 221, 194, 66, 126, 89,
]);

export function getCollectProtocolFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_PROTOCOL_FEE_DISCRIMINATOR
  );
}

export type CollectProtocolFeeInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountAmmConfig extends string | AccountMeta<string> = string,
  TAccountTokenVault0 extends string | AccountMeta<string> = string,
  TAccountTokenVault1 extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount0 extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount1 extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountAmmConfig extends string
        ? ReadonlyAccount<TAccountAmmConfig>
        : TAccountAmmConfig,
      TAccountTokenVault0 extends string
        ? WritableAccount<TAccountTokenVault0>
        : TAccountTokenVault0,
      TAccountTokenVault1 extends string
        ? WritableAccount<TAccountTokenVault1>
        : TAccountTokenVault1,
      TAccountRecipientTokenAccount0 extends string
        ? WritableAccount<TAccountRecipientTokenAccount0>
        : TAccountRecipientTokenAccount0,
      TAccountRecipientTokenAccount1 extends string
        ? WritableAccount<TAccountRecipientTokenAccount1>
        : TAccountRecipientTokenAccount1,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectProtocolFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount0Requested: bigint;
  amount1Requested: bigint;
};

export type CollectProtocolFeeInstructionDataArgs = {
  amount0Requested: number | bigint;
  amount1Requested: number | bigint;
};

export function getCollectProtocolFeeInstructionDataEncoder(): FixedSizeEncoder<CollectProtocolFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount0Requested', getU64Encoder()],
      ['amount1Requested', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_PROTOCOL_FEE_DISCRIMINATOR })
  );
}

export function getCollectProtocolFeeInstructionDataDecoder(): FixedSizeDecoder<CollectProtocolFeeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount0Requested', getU64Decoder()],
    ['amount1Requested', getU64Decoder()],
  ]);
}

export function getCollectProtocolFeeInstructionDataCodec(): FixedSizeCodec<
  CollectProtocolFeeInstructionDataArgs,
  CollectProtocolFeeInstructionData
> {
  return combineCodec(
    getCollectProtocolFeeInstructionDataEncoder(),
    getCollectProtocolFeeInstructionDataDecoder()
  );
}

export type CollectProtocolFeeInput<
  TAccountOwner extends string = string,
  TAccountPoolState extends string = string,
  TAccountAmmConfig extends string = string,
  TAccountTokenVault0 extends string = string,
  TAccountTokenVault1 extends string = string,
  TAccountRecipientTokenAccount0 extends string = string,
  TAccountRecipientTokenAccount1 extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  poolState: Address<TAccountPoolState>;
  ammConfig: Address<TAccountAmmConfig>;
  tokenVault0: Address<TAccountTokenVault0>;
  tokenVault1: Address<TAccountTokenVault1>;
  recipientTokenAccount0: Address<TAccountRecipientTokenAccount0>;
  recipientTokenAccount1: Address<TAccountRecipientTokenAccount1>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount0Requested: CollectProtocolFeeInstructionDataArgs['amount0Requested'];
  amount1Requested: CollectProtocolFeeInstructionDataArgs['amount1Requested'];
};

export function getCollectProtocolFeeInstruction<
  TAccountOwner extends string,
  TAccountPoolState extends string,
  TAccountAmmConfig extends string,
  TAccountTokenVault0 extends string,
  TAccountTokenVault1 extends string,
  TAccountRecipientTokenAccount0 extends string,
  TAccountRecipientTokenAccount1 extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_V3_PROGRAM_ADDRESS,
>(
  input: CollectProtocolFeeInput<
    TAccountOwner,
    TAccountPoolState,
    TAccountAmmConfig,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountRecipientTokenAccount0,
    TAccountRecipientTokenAccount1,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectProtocolFeeInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountPoolState,
  TAccountAmmConfig,
  TAccountTokenVault0,
  TAccountTokenVault1,
  TAccountRecipientTokenAccount0,
  TAccountRecipientTokenAccount1,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_V3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    poolState: { value: input.poolState ?? null, isWritable: true },
    ammConfig: { value: input.ammConfig ?? null, isWritable: false },
    tokenVault0: { value: input.tokenVault0 ?? null, isWritable: true },
    tokenVault1: { value: input.tokenVault1 ?? null, isWritable: true },
    recipientTokenAccount0: {
      value: input.recipientTokenAccount0 ?? null,
      isWritable: true,
    },
    recipientTokenAccount1: {
      value: input.recipientTokenAccount1 ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.ammConfig),
      getAccountMeta(accounts.tokenVault0),
      getAccountMeta(accounts.tokenVault1),
      getAccountMeta(accounts.recipientTokenAccount0),
      getAccountMeta(accounts.recipientTokenAccount1),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getCollectProtocolFeeInstructionDataEncoder().encode(
      args as CollectProtocolFeeInstructionDataArgs
    ),
    programAddress,
  } as CollectProtocolFeeInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountPoolState,
    TAccountAmmConfig,
    TAccountTokenVault0,
    TAccountTokenVault1,
    TAccountRecipientTokenAccount0,
    TAccountRecipientTokenAccount1,
    TAccountTokenProgram
  >);
}

export type ParsedCollectProtocolFeeInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    poolState: TAccountMetas[1];
    ammConfig: TAccountMetas[2];
    tokenVault0: TAccountMetas[3];
    tokenVault1: TAccountMetas[4];
    recipientTokenAccount0: TAccountMetas[5];
    recipientTokenAccount1: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: CollectProtocolFeeInstructionData;
};

export function parseCollectProtocolFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectProtocolFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      poolState: getNextAccount(),
      ammConfig: getNextAccount(),
      tokenVault0: getNextAccount(),
      tokenVault1: getNextAccount(),
      recipientTokenAccount0: getNextAccount(),
      recipientTokenAccount1: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCollectProtocolFeeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
