/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { AMM_V3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_OPERATION_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  63, 87, 148, 33, 109, 35, 8, 104,
]);

export function getCreateOperationAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_OPERATION_ACCOUNT_DISCRIMINATOR
  );
}

export type CreateOperationAccountInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountOperationState extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            AccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountOperationState extends string
        ? WritableAccount<TAccountOperationState>
        : TAccountOperationState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateOperationAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreateOperationAccountInstructionDataArgs = {};

export function getCreateOperationAccountInstructionDataEncoder(): FixedSizeEncoder<CreateOperationAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CREATE_OPERATION_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCreateOperationAccountInstructionDataDecoder(): FixedSizeDecoder<CreateOperationAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCreateOperationAccountInstructionDataCodec(): FixedSizeCodec<
  CreateOperationAccountInstructionDataArgs,
  CreateOperationAccountInstructionData
> {
  return combineCodec(
    getCreateOperationAccountInstructionDataEncoder(),
    getCreateOperationAccountInstructionDataDecoder()
  );
}

export type CreateOperationAccountInput<
  TAccountOwner extends string = string,
  TAccountOperationState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  operationState: Address<TAccountOperationState>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCreateOperationAccountInstruction<
  TAccountOwner extends string,
  TAccountOperationState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof AMM_V3_PROGRAM_ADDRESS,
>(
  input: CreateOperationAccountInput<
    TAccountOwner,
    TAccountOperationState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateOperationAccountInstruction<
  TProgramAddress,
  TAccountOwner,
  TAccountOperationState,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_V3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: true },
    operationState: { value: input.operationState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.operationState),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateOperationAccountInstructionDataEncoder().encode({}),
    programAddress,
  } as CreateOperationAccountInstruction<
    TProgramAddress,
    TAccountOwner,
    TAccountOperationState,
    TAccountSystemProgram
  >);
}

export type ParsedCreateOperationAccountInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    operationState: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateOperationAccountInstructionData;
};

export function parseCreateOperationAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateOperationAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      operationState: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateOperationAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
