/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { AMM_V3_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COLLECT_REMAINING_REWARDS_DISCRIMINATOR = new Uint8Array([
  18, 237, 166, 197, 34, 16, 213, 144,
]);

export function getCollectRemainingRewardsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_REMAINING_REWARDS_DISCRIMINATOR
  );
}

export type CollectRemainingRewardsInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountRewardFunder extends string | AccountMeta<string> = string,
  TAccountFunderTokenAccount extends string | AccountMeta<string> = string,
  TAccountPoolState extends string | AccountMeta<string> = string,
  TAccountRewardTokenVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountRewardFunder extends string
        ? ReadonlySignerAccount<TAccountRewardFunder> &
            AccountSignerMeta<TAccountRewardFunder>
        : TAccountRewardFunder,
      TAccountFunderTokenAccount extends string
        ? WritableAccount<TAccountFunderTokenAccount>
        : TAccountFunderTokenAccount,
      TAccountPoolState extends string
        ? WritableAccount<TAccountPoolState>
        : TAccountPoolState,
      TAccountRewardTokenVault extends string
        ? ReadonlyAccount<TAccountRewardTokenVault>
        : TAccountRewardTokenVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectRemainingRewardsInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
};

export type CollectRemainingRewardsInstructionDataArgs = {
  rewardIndex: number;
};

export function getCollectRemainingRewardsInstructionDataEncoder(): FixedSizeEncoder<CollectRemainingRewardsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['rewardIndex', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: COLLECT_REMAINING_REWARDS_DISCRIMINATOR,
    })
  );
}

export function getCollectRemainingRewardsInstructionDataDecoder(): FixedSizeDecoder<CollectRemainingRewardsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['rewardIndex', getU8Decoder()],
  ]);
}

export function getCollectRemainingRewardsInstructionDataCodec(): FixedSizeCodec<
  CollectRemainingRewardsInstructionDataArgs,
  CollectRemainingRewardsInstructionData
> {
  return combineCodec(
    getCollectRemainingRewardsInstructionDataEncoder(),
    getCollectRemainingRewardsInstructionDataDecoder()
  );
}

export type CollectRemainingRewardsInput<
  TAccountRewardFunder extends string = string,
  TAccountFunderTokenAccount extends string = string,
  TAccountPoolState extends string = string,
  TAccountRewardTokenVault extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  rewardFunder: TransactionSigner<TAccountRewardFunder>;
  funderTokenAccount: Address<TAccountFunderTokenAccount>;
  poolState: Address<TAccountPoolState>;
  rewardTokenVault: Address<TAccountRewardTokenVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardIndex: CollectRemainingRewardsInstructionDataArgs['rewardIndex'];
};

export function getCollectRemainingRewardsInstruction<
  TAccountRewardFunder extends string,
  TAccountFunderTokenAccount extends string,
  TAccountPoolState extends string,
  TAccountRewardTokenVault extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof AMM_V3_PROGRAM_ADDRESS,
>(
  input: CollectRemainingRewardsInput<
    TAccountRewardFunder,
    TAccountFunderTokenAccount,
    TAccountPoolState,
    TAccountRewardTokenVault,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CollectRemainingRewardsInstruction<
  TProgramAddress,
  TAccountRewardFunder,
  TAccountFunderTokenAccount,
  TAccountPoolState,
  TAccountRewardTokenVault,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? AMM_V3_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardFunder: { value: input.rewardFunder ?? null, isWritable: false },
    funderTokenAccount: {
      value: input.funderTokenAccount ?? null,
      isWritable: true,
    },
    poolState: { value: input.poolState ?? null, isWritable: true },
    rewardTokenVault: {
      value: input.rewardTokenVault ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.rewardFunder),
      getAccountMeta(accounts.funderTokenAccount),
      getAccountMeta(accounts.poolState),
      getAccountMeta(accounts.rewardTokenVault),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getCollectRemainingRewardsInstructionDataEncoder().encode(
      args as CollectRemainingRewardsInstructionDataArgs
    ),
    programAddress,
  } as CollectRemainingRewardsInstruction<
    TProgramAddress,
    TAccountRewardFunder,
    TAccountFunderTokenAccount,
    TAccountPoolState,
    TAccountRewardTokenVault,
    TAccountTokenProgram
  >);
}

export type ParsedCollectRemainingRewardsInstruction<
  TProgram extends string = typeof AMM_V3_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    rewardFunder: TAccountMetas[0];
    funderTokenAccount: TAccountMetas[1];
    poolState: TAccountMetas[2];
    rewardTokenVault: TAccountMetas[3];
    tokenProgram: TAccountMetas[4];
  };
  data: CollectRemainingRewardsInstructionData;
};

export function parseCollectRemainingRewardsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCollectRemainingRewardsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewardFunder: getNextAccount(),
      funderTokenAccount: getNextAccount(),
      poolState: getNextAccount(),
      rewardTokenVault: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCollectRemainingRewardsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
