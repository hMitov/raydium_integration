/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getTickStateDecoder,
  getTickStateEncoder,
  type TickState,
  type TickStateArgs,
} from '../types';

export const TICK_ARRAY_STATE_DISCRIMINATOR = new Uint8Array([
  192, 155, 85, 205, 49, 249, 129, 42,
]);

export function getTickArrayStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TICK_ARRAY_STATE_DISCRIMINATOR
  );
}

export type TickArrayState = {
  discriminator: ReadonlyUint8Array;
  poolId: Address;
  startTickIndex: number;
  ticks: Array<TickState>;
  initializedTickCount: number;
  padding: ReadonlyUint8Array;
};

export type TickArrayStateArgs = {
  poolId: Address;
  startTickIndex: number;
  ticks: Array<TickStateArgs>;
  initializedTickCount: number;
  padding: ReadonlyUint8Array;
};

export function getTickArrayStateEncoder(): FixedSizeEncoder<TickArrayStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['poolId', getAddressEncoder()],
      ['startTickIndex', getI32Encoder()],
      ['ticks', getArrayEncoder(getTickStateEncoder(), { size: 60 })],
      ['initializedTickCount', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 115)],
    ]),
    (value) => ({ ...value, discriminator: TICK_ARRAY_STATE_DISCRIMINATOR })
  );
}

export function getTickArrayStateDecoder(): FixedSizeDecoder<TickArrayState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['poolId', getAddressDecoder()],
    ['startTickIndex', getI32Decoder()],
    ['ticks', getArrayDecoder(getTickStateDecoder(), { size: 60 })],
    ['initializedTickCount', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 115)],
  ]);
}

export function getTickArrayStateCodec(): FixedSizeCodec<
  TickArrayStateArgs,
  TickArrayState
> {
  return combineCodec(getTickArrayStateEncoder(), getTickArrayStateDecoder());
}

export function decodeTickArrayState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TickArrayState, TAddress>;
export function decodeTickArrayState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TickArrayState, TAddress>;
export function decodeTickArrayState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TickArrayState, TAddress> | MaybeAccount<TickArrayState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTickArrayStateDecoder()
  );
}

export async function fetchTickArrayState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TickArrayState, TAddress>> {
  const maybeAccount = await fetchMaybeTickArrayState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTickArrayState<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TickArrayState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTickArrayState(maybeAccount);
}

export async function fetchAllTickArrayState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TickArrayState>[]> {
  const maybeAccounts = await fetchAllMaybeTickArrayState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTickArrayState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TickArrayState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeTickArrayState(maybeAccount)
  );
}

export function getTickArrayStateSize(): number {
  return 10240;
}
