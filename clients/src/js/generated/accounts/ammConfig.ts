/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const AMM_CONFIG_DISCRIMINATOR = new Uint8Array([
  218, 244, 33, 104, 203, 203, 43, 111,
]);

export function getAmmConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(AMM_CONFIG_DISCRIMINATOR);
}

export type AmmConfig = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  index: number;
  owner: Address;
  protocolFeeRate: number;
  tradeFeeRate: number;
  tickSpacing: number;
  fundFeeRate: number;
  paddingU32: number;
  fundOwner: Address;
  padding: Array<bigint>;
};

export type AmmConfigArgs = {
  bump: number;
  index: number;
  owner: Address;
  protocolFeeRate: number;
  tradeFeeRate: number;
  tickSpacing: number;
  fundFeeRate: number;
  paddingU32: number;
  fundOwner: Address;
  padding: Array<number | bigint>;
};

export function getAmmConfigEncoder(): FixedSizeEncoder<AmmConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['index', getU16Encoder()],
      ['owner', getAddressEncoder()],
      ['protocolFeeRate', getU32Encoder()],
      ['tradeFeeRate', getU32Encoder()],
      ['tickSpacing', getU16Encoder()],
      ['fundFeeRate', getU32Encoder()],
      ['paddingU32', getU32Encoder()],
      ['fundOwner', getAddressEncoder()],
      ['padding', getArrayEncoder(getU64Encoder(), { size: 3 })],
    ]),
    (value) => ({ ...value, discriminator: AMM_CONFIG_DISCRIMINATOR })
  );
}

export function getAmmConfigDecoder(): FixedSizeDecoder<AmmConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['index', getU16Decoder()],
    ['owner', getAddressDecoder()],
    ['protocolFeeRate', getU32Decoder()],
    ['tradeFeeRate', getU32Decoder()],
    ['tickSpacing', getU16Decoder()],
    ['fundFeeRate', getU32Decoder()],
    ['paddingU32', getU32Decoder()],
    ['fundOwner', getAddressDecoder()],
    ['padding', getArrayDecoder(getU64Decoder(), { size: 3 })],
  ]);
}

export function getAmmConfigCodec(): FixedSizeCodec<AmmConfigArgs, AmmConfig> {
  return combineCodec(getAmmConfigEncoder(), getAmmConfigDecoder());
}

export function decodeAmmConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<AmmConfig, TAddress>;
export function decodeAmmConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<AmmConfig, TAddress>;
export function decodeAmmConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<AmmConfig, TAddress> | MaybeAccount<AmmConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAmmConfigDecoder()
  );
}

export async function fetchAmmConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<AmmConfig, TAddress>> {
  const maybeAccount = await fetchMaybeAmmConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAmmConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<AmmConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAmmConfig(maybeAccount);
}

export async function fetchAllAmmConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<AmmConfig>[]> {
  const maybeAccounts = await fetchAllMaybeAmmConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAmmConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<AmmConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAmmConfig(maybeAccount));
}

export function getAmmConfigSize(): number {
  return 117;
}
